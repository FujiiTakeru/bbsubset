colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(bbsubset::bbsubset(S,k)$subset)
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
#print(t(res[c(1,24,48),]))
print(res)
#lapply(c(1,24,48), function(i) basecomp(res[i,]))
basecomp(res)
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
mdsfile <- "~/R/bbsubset/CS96_d4_n24_sort.csv"
S <- lapply(scan(mdsfile,"char",skip=1),function(x) unlist(strsplit(x,','))[-1])
head(S,3) # データはこんな感じ
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
reshape2::melt(B)
L
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(bbsubset::bbsubset(S,k)$subset)
library(ROI.plugin.lpsolve)
k <- 12
res <- t(sapply(S,function(s) bbsubset(s,12)))
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
print(t(res[c(1,24,48),]))
lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
S
lapply(c(1,24,48), function(i) basecomp(res[i,]))
lapply(c(1,24,48), function(i) basecomp(res[i]))
res[[1]]
res
res[1,]
lapply(c(1,24,48), function(i) basecomp(res$subset[i,]))
res <- t(sapply(S[1:100],function(s) bbsubset::bbsubset(s,12)$subset))
lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
lapply(c(1,24,48), function(i) basecomp(res$subset[i,]))
print(t(res[c(1,24,48),]))
print(t(res[c(1,24,48),]))
lapply(c(1,24,48), function(i) basecomp(res[i,]))
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
S
S[[1]]
S[[1]] %>% t
S[[1]] %>% as.matrix()
S[[1]] %>% as.matrix() %>% as_tibble()
S[[1]] %>% as.matrix() %>% as_tibble() %>% View
S[[1]] %>% as.matrix() %>% write_csv("~/Desktop/")
S[[1]] %>% as.matrix() %>% write_csv("~/Desktop/a.csv")
S[[1]] %>% as.matrix() %>% write.csv("~/Desktop/a.csv")
DNABarcodes::create.dnabarcodes(6,3)
mdsfile <- "~/R/bbsubset/CS96_d4_n24_sort.csv"
S <- lapply(scan(mdsfile,"char",skip=1),function(x) unlist(strsplit(x,','))[-1])
head(S,3) # データはこんな感じ
reshape2::melt(B)
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
length(barcodes)
4^6
4^5
myset <- bbsubset::bbsubset(barcodes,12)
myset$subset
myset <- bbsubset::bbsubset(barcodes,5,solver="lpsolve",timeout=10)
barcodes <- DNABarcodes::create.dnabarcodes(n=6, dist=3)
myset <- bbsubset::bbsubset(barcodes,5,solver="lpsolve",timeout=10)
library(ROI)
library(ROI.plugin.lpsolve)
library(slam)
myset <- bbsubset::bbsubset(barcodes,5,solver="lpsolve",timeout=10)
devtools::check()
devtools::check()
devtools::check()
devtools::install_github("tfwis/bbsubset")
bbsubset::basecomp(myset$subset)
barcodes <- DNABarcodes::create.dnabarcodes(n=6, dist=3)
myset <- bbsubset::bbsubset(barcodes,12)
myset$subset
bbsubset::basecomp(myset$subset)
myset <- bbsubset::bbsubset(barcodes,12)
myset$subset
devtools::check()
install.packages("ROI.plugin.alabama")
install.packages("ROI.plugin.gurobi", repos="http://R-Forge.R-project.org")
remotes:::install_github("FlorianSchwendinger/ROI.plugin.gurobi")
barcodes <- DNABarcodes::create.dnabarcodes(n=6, dist=3)
barcodes <- DNABarcodes::create.dnabarcodes(n=6, dist=3)
barcodes <- DNABarcodes::create.dnabarcodes(n=6, dist=3)
length(barcodes)
barcodes <- DNABarcodes::create.dnabarcodes(n=8, dist=3)
length(barcodes)
barcodes <- DNABarcodes::create.dnabarcodes(n=9, dist=3)
length(barcodes)
barcodes <- DNABarcodes::create.dnabarcodes(n=8, dist=3)
length(barcodes)
library(ROI.plugin.lpsolve)
library(ROI.plugin.lpsolve)
library(ROI.plugin.gurobi)
library(ROI.plugin.glpk)
install.packages()
install.packages("ROI.plugin.glpk")
library(ROI.plugin.glpk)
myset <- bbsubset::bbsubset(barcodes,12,Solver="gurobi")
myset$subset
timings_lpsolve<-c()
for(k in seq(0,300,by=12)){
start_time <- Sys.time() #開始
myset <- bbsubset::bbsubset(barcodes,k,solver="lpsolve")
end_time <- Sys.time()	#終了
timings_lpsolve[k]<-as.numeric(end_time - start_time)
rm(myset)
}
bbsubset::bbsubset(barcodes,12,solver="lpsolve")
bbsubset::bbsubset(barcodes,12)
bbsubset::bbsubset(barcodes,12,Solver="lpsolve")
timings_lpsolve<-c()
for(k in seq(0,300,by=12)){
start_time <- Sys.time() #開始
myset <- bbsubset::bbsubset(barcodes,k,Solver="lpsolve")
end_time <- Sys.time()	#終了
timings_lpsolve[k]<-as.numeric(end_time - start_time)
rm(myset)
}
timings_glpk<-c()
for(k in seq(0,300,by=12)){
start_time <- Sys.time() #開始
myset <- bbsubset::bbsubset(barcodes,k,Solver="glpk")
end_time <- Sys.time()	#終了
timings_glpk[k]<-as.numeric(end_time - start_time)
rm(myset)
}
timings_gurobi<-c()
for(k in seq(0,300,by=12)){
start_time <- Sys.time() #開始
myset <- bbsubset::bbsubset(barcodes,k,Solver="gurobi")
end_time <- Sys.time()	#終了
timings_gurobi[k]<-as.numeric(end_time - start_time)
rm(myset)
}
plot(timings_lpsolve,main="lpsolve")
plot(timings_glpk,main="glpk")
plot(timings_gurobi,main="gurobi")
timings_lpsolve
timings_lpsolve %>% dfim
timings_lpsolve %>% dim
library(tidyverse)
timings_lpsolve %>% dim
timings_lpsolve %>% length
a <- list()
myset <- bbsubset::bbsubset(barcodes,9,Solver="gurobi")
bbsubset::basecomp(myset$subset)
bbsubset::basecomp(myset$subset) %>% as_vector()
bbsubset::basecomp(myset$subset) %>% as.vector()
bbsubset::basecomp(myset$subset) %>% as.vector(t(.))
bbsubset::basecomp(myset$subset) %>% t
bbsubset::basecomp(myset$subset) %>% t %>% as_vector()
bbsubset::basecomp(myset$subset) %>% t %>% as.vector()
cbind(timings_lpsolve,timings_glpk,timings_gurobi)
bbsubset::bbsubset(bbsubset::sample_barcodes,8)
library(ROI.plugin.lpsolve)
bbsubset::bbsubset(bbsubset::sample_barcodes,8)
myset <- bbsubset::bbsubset(bbsubset::sample_barcodes,8)
library(bbsubset)
myset <- bbsubset::bbsubset(sample_barcodes,8)
myset$subset
myset$subset
bbsubset::basecomp()
output <- myset
bbsubset::basecomp(output$subset)
bbsubset <- function(S,k,solver="lpsolve",...) {
y <- rep(k*1/4,4*nchar(S[1]))
N <- length(S)
M <- length(y)
B <- matACTG(S)
A <- rbind(
rep(c(1,0),c(N,M)),
cbind(B, diag(M)),
cbind(B,-diag(M))
)
#cat("Problem constructed.",fill=TRUE)
model <- ROI::OP(
# minimize \sum t_i
objective = rep(c(0,1),c(N,M)),
constraints = ROI::L_constraint(
L = slam::as.simple_triplet_matrix(A),
dir = rep(c("==",">=","<="),c(1,M,M)),
rhs = c(k,y,y),
names = c(paste0("x",seq(N)),paste0("t",seq(M)))
),
types = rep(c("B","C"),c(N,M))
)
is <- ROI::ROI_applicable_solvers(model)
if (is.null(is)) library(ROI.plugin.lpsolve)
re <- ROI::ROI_solve(model,solver=solver,...)
re$model  <- model
re$subset <- S[as.logical(round(re$solution[seq(N)]))]
return(re)
}
library(bbsubset)
rm(bbsubset())
rm(bbsubset)
library(bbsubset)
bsubset <- function(S,k,solver="lpsolve",...) {
y <- rep(k*1/4,4*nchar(S[1]))
N <- length(S)
M <- length(y)
B <- matACTG(S)
A <- rbind(
rep(c(1,0),c(N,M)),
cbind(B, diag(M)),
cbind(B,-diag(M))
)
#cat("Problem constructed.",fill=TRUE)
model <- ROI::OP(
# minimize \sum t_i
objective = rep(c(0,1),c(N,M)),
constraints = ROI::L_constraint(
L = slam::as.simple_triplet_matrix(A),
dir = rep(c("==",">=","<="),c(1,M,M)),
rhs = c(k,y,y),
names = c(paste0("x",seq(N)),paste0("t",seq(M)))
),
types = rep(c("B","C"),c(N,M))
)
is <- ROI::ROI_applicable_solvers(model)
if (is.null(is)) library(ROI.plugin.lpsolve)
re <- ROI::ROI_solve(model,solver=solver,...)
re$model  <- model
re$subset <- S[as.logical(round(re$solution[seq(N)]))]
return(re)
}
bsubset(bbsubset::sample_barcodes,8)
detach("package:ROI.plugin.lpsolve", unload = TRUE)
bsubset(bbsubset::sample_barcodes,8)
bsubset <- function(S,k,solver="lpsolve",...) {
y <- rep(k*1/4,4*nchar(S[1]))
N <- length(S)
M <- length(y)
B <- matACTG(S)
A <- rbind(
rep(c(1,0),c(N,M)),
cbind(B, diag(M)),
cbind(B,-diag(M))
)
#cat("Problem constructed.",fill=TRUE)
model <- ROI::OP(
# minimize \sum t_i
objective = rep(c(0,1),c(N,M)),
constraints = ROI::L_constraint(
L = slam::as.simple_triplet_matrix(A),
dir = rep(c("==",">=","<="),c(1,M,M)),
rhs = c(k,y,y),
names = c(paste0("x",seq(N)),paste0("t",seq(M)))
),
types = rep(c("B","C"),c(N,M))
)
if (is.null(ROI::ROI_applicable_solvers(model))) library(ROI.plugin.lpsolve)
re <- ROI::ROI_solve(model,solver=solver,...)
re$model  <- model
re$subset <- S[as.logical(round(re$solution[seq(N)]))]
return(re)
}
bsubset(bbsubset::sample_barcodes,8)
devtools::check()
devtools::check()
devtools::check()
??bbsubset
?bbsubset
?glmnet::glmnet
?ROI.plugin.gurobi
??ROI.plugin.gurobi
??ROI.plugin.lpsolve
?ROI.plugin.lpsolve
bbsubset(sample_barcodes,3,TIME_LIMIT=0)
bbsubset(sample_barcodes,3,solver="gurobi",TIME_LIMIT=0)
library(ROI.plugin.gurobi)
bbsubset(sample_barcodes,3,solver="gurobi",TIME_LIMIT=0)
bbsubset(sample_barcodes,3,solver="gurobi",time_limit=0)
bbsubset(sample_barcodes,7,solver="gurobi",time_limit=0)
bbsubset(sample_barcodes,7,solver="gurobi",timeput=0)
bbsubset(sample_barcodes,7,solver="gurobi",timeout=0)
bbsubset(sample_barcodes,7,solver="gurobi",time_limit=0)
bbsubset(sample_barcodes,7,solver="gurobi",Timeout=0)
bbsubset(sample_barcodes,7,solver="gurobi",TimeoOut=0)
bbsubset(sample_barcodes,7,solver="gurobi",TimeOut=0)
?ROI_solve
bbsubset(sample_barcodes,7,solver="gurobi",TimeLimit=0)
length(sample_barcodes)
test <- DNABarcodes::create.dnabarcodes(n=8)
kength(test)
length(test)
bbsubset(tets,301,solver="gurobi",TimeLimit=1)
bbsubset(test,301,solver="gurobi",TimeLimit=1)
bbsubset(test,301,solver="gurobi",TimeLimit=1)$subset %>% basecomp
bbsubset(test,301,solver="gurobi",TimeLimit=1)$subset %>% basecomp
library(tidyverse)
bbsubset(test,301,solver="gurobi",TimeLimit=1)$subset %>% basecomp
bbsubset(test,301,solver="gurobi",TimeLimit=0.01)$subset %>% basecomp
bbsubset(test,301,solver="gurobi",TimeLimit=0)$subset %>% basecomp
bbsubset(test,383,solver="gurobi",TimeLimit=0.01)$subset %>% basecomp
bbsubset(test,383,solver="gurobi",TimeLimit=0.01)$subset %>% basecomp
bbsubset(test,383,solver="gurobi",TimeLimit=0.0000000000000000000001)$subset %>% basecomp
bbsubset(test,381,solver="gurobi",TimeLimit=0.0000000000000000000001)$subset %>% basecomp
bbsubset(test,381,solver="gurobi",TimeLimit=0.0000000000000000000001)
bbsubset(test,381,solver="gurobi",TimeLimit=e-100)
bbsubset(test,381,solver="gurobi",TimeLimit=10^(10))
bbsubset(test,381,solver="gurobi",TimeLimit=10^(10))$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=10^(100))$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=10^(-100))$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=10^(-1000))$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=1$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=10^(-1000))$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=10^(-1000))$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=1$subset %>% basecomp()
bbsubset(test,381,solver="gurobi",TimeLimit=10^(-1000))$subset %>% basecomp()
bbsubset(test,24,solver="lpsolve",timeout=1)$subset %>% basecomp()
bbsubset(test,36,solver="lpsolve",timeout=1)$subset %>% basecomp()
bbsubset(test,168,solver="lpsolve",timeout=1)$subset %>% basecomp()
bbsubset(test,400,solver="lpsolve",timeout=1)$subset %>% basecomp()
bbsubset(test,168,solver="lpsolve",timeout=1)
bbsubset(test,400,solver="lpsolve",timeout=1)
bbsubset(test,400,solver="gurobi",TimeLimit=1)
bbsubset(test,400,solver="gurobi",TimeLimit=0.01)
devtools::install_github("tfwis/bbsubset")
?bbsubset
devtools::install_github("tfwis/bbsubset")
?bbsubset
?bbsubset
devtools::install_github("tfwis/bbsubset")
library(bbsubset)
detach("package:bbsubset", unload = TRUE)
remove.packages("bbsubset")
devtools::install_github("tfwis/bbsubset")
library(bbsubset)
?bbsubset
devtools::as.package()
devtools::check()
devtools::install_github("tfwis/bbsubset")
?bbsubset
?glmnet::glmnet
?ROI_solve
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install_github("tfwis/bbsubset")
?bbsubset
devtools::check()
?bbsubset
devtools::check()
devtools::check()
devtools::check()
devtools::install_github("tfwis/bbsubset")
?bbsubset
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install_github("tfwis/bbsubset")
?bbsubset
?bbsubset
devtools::install_github("tfwis/bbsubset")
?bbsubset
devtools::install_github("tfwis/bbsubset")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install_github("tfwis/bbsubset")
?bbsubset
devtools::check()
devtools::install_github("tfwis/bbsubset")
?bbsubset
