4^7
4^6
S
#' Extract well-balanced subset minimizing abs(error) with LP performed by gurobi
#'
#' @param S barcode set
#' @param k the size of barcode subset to extract
#'
#' @importFrom gurobi gurobi
#' @importFrom slam as.simple_triplet_matrix
#' @export
#'
bbsubset.G <- function(S,k) {
y <- rep(k*1/4,4*nchar(S[1]))
N <- length(S)
M <- length(y)
B <- matACTG(S)
A <- rbind(
rep(c(1,0),c(N,M)),
cbind(B, diag(M)),
cbind(B,-diag(M))
)
#cat("Problem constructed.",fill=TRUE)
model <- list()
# minimize \sum t_i
model$A <- slam::as.simple_triplet_matrix(A)
model$obj <- rep(c(0,1),c(N,M))
model$modelsense <- 'min'
model$rhs <- c(k,y,y)
model$sense <- rep(c("=",">=","<="),c(1,M,M))
model$vtype <- rep(c("B","C"),c(N,M))
#params <- list(OutputFlag=0)
re <- gurobi::gurobi(model)#,params)
re$model  <- model
re$subset <- S[as.logical(round(re$x[seq(N)]))]
return(re)
}
bbsubset.G(S,12)
bbsubset.G(S,12)->a
a
a$status
a$subset
a$subset %>% basecomp()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?bbsubset
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
print(code)
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
L <- nchar(S[1])
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3)
print(code)
B <- matACTG(S)
L <- nchar(S[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3)[1:24]
print(code)
B <- matACTG(S)
L <- nchar(S[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
mdsfile <- "~/R/bbsubset/CS96_d4_n24_sort.csv"
S <- lapply(scan(mdsfile,"char",skip=1),function(x) unlist(strsplit(x,','))[-1])
head(S,3) # データはこんな感じ
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3)[1:24]
print(code)
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
print(code)
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
reshape2::melt(B)
reshape2::melt(B) %>% .$value
reshape2::melt(B) %>% .$value %>% .[1:24]
S
choose(24,12)
DNABarcodes::create.dnabarcodes6,3
DNABarcodes::create.dnabarcodes(6,3)
S
library(ggplot2)
library(bbsubset)
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
library(tidyverse)
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
print(code)
library(bbsubset)
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
print(code)
library(ggplot2)
library(bbsubset)
code
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(sapply(S[1:100],function(s) bbsubset::bbsubset(s,k)$subset))
res <- t(bbsubset::bbsubset(S,k)$subset)
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
print(t(res))
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
print(res)
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
#print(t(res[c(1,24,48),]))
print(res)
#lapply(c(1,24,48), function(i) basecomp(res[i,]))
basecomp(res)
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(bbsubset::bbsubset(S,k)$subset)
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
#print(t(res[c(1,24,48),]))
print(res)
#lapply(c(1,24,48), function(i) basecomp(res[i,]))
basecomp(res)
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>% .[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(bbsubset::bbsubset(S,k)$subset)
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
#print(t(res[c(1,24,48),]))
print(res)
#lapply(c(1,24,48), function(i) basecomp(res[i,]))
basecomp(res)
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
plot_subset <- function(x) {
bmat <- t(basecomp(x))
bmat <- bmat/rowSums(bmat)
g <- bmat %>%
as_tibble() %>% mutate(order=paste0(1:nrow(bmat),"bp")) %>%
tidyr::gather(value="value", key="nucleotide", -5) %>%
transform("nucleotide"= factor("nucleotide", levels = c("A", "T", "G", "C"))) %>%
ggplot(aes(x=order,y=value,fill=nucleotide)) + geom_bar(stat="identity") +
geom_abline(intercept=0.25,slope = 0,linetype=5) +
geom_abline(intercept=0.5,slope = 0,linetype=5) +
geom_abline(intercept=0.75,slope = 0,linetype=5)
return(g)
}
code
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% .[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(bbsubset::bbsubset(S,k)$subset)
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
#print(t(res[c(1,24,48),]))
print(res)
#lapply(c(1,24,48), function(i) basecomp(res[i,]))
basecomp(res)
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% dim#.[1:24]
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% length#.[1:24]
S
barcodes <- DNABarcodes::create.dnabarcodes(n=6, dist=3)
myset <- bbsubset::bbsubset(barcodes,12)
myset$subset
library()
bbsubset::basecomp(myset$subset)
barcodes <- DNABarcodes::create.dnabarcodes(n=6, dist=3)
```{r}
myset <- bbsubset::bbsubset(barcodes,12)
myset$subset
library()
bbsubset::basecomp(myset$subset)
library(ROI.plugin.lpsolve)
bbsubset::basecomp(myset$subset)
myset$subset
chose(76,12)
choose(76,12)
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% .[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S)#[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("N sequences") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(bbsubset::bbsubset(S,k)$subset)
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
#print(t(res[c(1,24,48),]))
print(res)
#lapply(c(1,24,48), function(i) basecomp(res[i,]))
basecomp(res)
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
mdsfile <- "~/R/bbsubset/CS96_d4_n24_sort.csv"
S <- lapply(scan(mdsfile,"char",skip=1),function(x) unlist(strsplit(x,','))[-1])
head(S,3) # データはこんな感じ
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
code <- diag(4)
colnames(code) <- c("A","C","T","G")
print(code)
B <- matACTG(S[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
reshape2::melt(B)
L
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
#res <- t(sapply(S,function(s) bbsubset(s,12)))
k <- 12
res <- t(bbsubset::bbsubset(S,k)$subset)
library(ROI.plugin.lpsolve)
k <- 12
res <- t(sapply(S,function(s) bbsubset(s,12)))
#lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
print(t(res[c(1,24,48),]))
lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
S
lapply(c(1,24,48), function(i) basecomp(res[i,]))
lapply(c(1,24,48), function(i) basecomp(res[i]))
res[[1]]
res
res[1,]
lapply(c(1,24,48), function(i) basecomp(res$subset[i,]))
res <- t(sapply(S[1:100],function(s) bbsubset::bbsubset(s,12)$subset))
lapply(c(1,131,446,496), function(i) basecomp(res[i,]))
lapply(c(1,24,48), function(i) basecomp(res$subset[i,]))
print(t(res[c(1,24,48),]))
print(t(res[c(1,24,48),]))
lapply(c(1,24,48), function(i) basecomp(res[i,]))
#write.csv(res,file="~/work/mdsubsets/CS96_d4_n24_sort_perfectBalanced12.csv",quote=FALSE)
S
S[[1]]
S[[1]] %>% t
S[[1]] %>% as.matrix()
S[[1]] %>% as.matrix() %>% as_tibble()
S[[1]] %>% as.matrix() %>% as_tibble() %>% View
S[[1]] %>% as.matrix() %>% write_csv("~/Desktop/")
S[[1]] %>% as.matrix() %>% write_csv("~/Desktop/a.csv")
S[[1]] %>% as.matrix() %>% write.csv("~/Desktop/a.csv")
DNABarcodes::create.dnabarcodes(6,3)
mdsfile <- "~/R/bbsubset/CS96_d4_n24_sort.csv"
S <- lapply(scan(mdsfile,"char",skip=1),function(x) unlist(strsplit(x,','))[-1])
head(S,3) # データはこんな感じ
reshape2::melt(B)
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
ggplot(reshape2::melt(B), aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
#S <- DNABarcodes::create.dnabarcodes(n = 6, dist = 3) %>% sort %>%.[1:24]
#code <- diag(4)
#colnames(code) <- c("A","C","T","G")
B <- matACTG(S[[1]])
L <- nchar(S[[1]][1])#[1])
#print(Matrix::Matrix(B))
reshape2::melt(B) %>% filter(Var1<=8) %>% ggplot(aes(Var2,ordered(Var1,levels=seq(4*L,1)),fill=factor(value))) +
geom_tile(color="black") + theme_minimal() +
scale_fill_manual(values=c("#CCCCCC","#666666"),name="",labels=c(0,1)) +
coord_fixed()  + # scale_y_reverse() +
xlab("Barcode ID") + ylab("4L bases") + # ggtitle("B") +
geom_hline(yintercept = seq(1,4*L+1,4)-0.5,lwd=0.5,colour="red",linetype=2) +
scale_x_discrete(limits=seq(ncol(B)))
length(barcodes)
4^6
4^5
myset <- bbsubset::bbsubset(barcodes,12)
myset$subset
